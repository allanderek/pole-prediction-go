package main

import (
	"encoding/json"
	"github.com/allanderek/pole-prediction-go/datastore"
	"strconv"
)

// FormulaOneSessionPrediction renders a prediction component for a Formula One session
templ FormulaOneSessionPrediction(sessionData FormulaOneSessionWithEntrants, userPrediction []int64) {
	// Prepare the data for JavaScript
	<div id="prediction-component" class="w-full max-w-3xl mx-auto bg-white rounded-lg shadow-md p-4 sm:p-6" data-session={ generateSessionDataJSON(sessionData, userPrediction) }>
		<div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
			<h3 class="text-xl font-bold mb-2 sm:mb-0">Prediction for <span id="session-name"></span></h3>
			<div id="deadline-container" class="text-left sm:text-right"></div>
		</div>
		<div id="mobile-instructions" class="hidden mb-4 p-3 bg-blue-50 text-blue-800 rounded-md border border-blue-200">
			<p class="text-sm">Touch and hold an item, then drag to reorder your prediction. You can also use the up/down buttons to adjust positions.</p>
		</div>
		<div id="entrants-list" class="space-y-2"></div>
		<div class="mt-6 text-right">
			<button id="save-prediction" class="bg-green-500 hover:bg-green-600 text-white font-semibold py-3 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 transition text-base">
				Save Prediction
			</button>
		</div>
	</div>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
	<script>
		// This function will be called when the DOM is loaded
		document.addEventListener('DOMContentLoaded', function() {
			// Check if we're on a mobile device and show instructions
			if (isMobileDevice()) {
				document.getElementById('mobile-instructions').classList.remove('hidden');
			}
			
			// Get session data from the data attribute (populated by Go template)
			const sessionDataElement = document.getElementById('prediction-component');
			const sessionData = JSON.parse(sessionDataElement.getAttribute('data-session'));
			const entrants = sessionData.entrants;
			const sessionId = sessionData.session.ID;
			const sessionName = sessionData.session.Name;
			let startTime = null;
			
			// Parse start time if available
			if (sessionData.session.start_time && sessionData.session.start_time.String) {
				startTime = sessionData.session.start_time.String;
			}

			// Update session name
			document.getElementById('session-name').textContent = sessionName;
			
			// Check if the session has started
			const hasStarted = startTime ? new Date(startTime) < new Date() : false;
			const deadlineContainer = document.getElementById('deadline-container');
			
			if (hasStarted) {
				deadlineContainer.innerHTML = '<div class="text-red-600 font-bold">Prediction period has ended</div>';
				document.getElementById('save-prediction').disabled = true;
				document.getElementById('save-prediction').classList.add('bg-gray-400');
				document.getElementById('save-prediction').classList.remove('bg-green-500', 'hover:bg-green-600');
				sessionDataElement.classList.add('opacity-75');
			} else if (startTime) {
				const deadline = new Date(startTime);
				const timeUntil = getTimeUntil(deadline);
				deadlineContainer.innerHTML = `<div class="text-blue-800">Time remaining: ${timeUntil}</div>`;
				
				// Update countdown every minute
				setInterval(() => {
					const updatedTimeUntil = getTimeUntil(deadline);
					deadlineContainer.innerHTML = `<div class="text-blue-800">Time remaining: ${updatedTimeUntil}</div>`;
					
					// Disable if time has passed
					if (new Date() >= deadline) {
						deadlineContainer.innerHTML = '<div class="text-red-600 font-bold">Prediction period has ended</div>';
						document.getElementById('save-prediction').disabled = true;
						document.getElementById('save-prediction').classList.add('bg-gray-400');
						document.getElementById('save-prediction').classList.remove('bg-green-500', 'hover:bg-green-600');
						sessionDataElement.classList.add('opacity-75');
					}
				}, 60000);
			}
			
			// Render entrants list
			const entrantsList = document.getElementById('entrants-list');
			
			// Entrants are already sorted on the backend
			// Render entrants as draggable items
			renderEntrants(entrants, entrantsList);
			
			// Set up sortable.js for drag and drop (touch-friendly)
			setupSortable(entrantsList);
			
			// Handle save button
			document.getElementById('save-prediction').addEventListener('click', function() {
				if (hasStarted) {
					alert('Cannot submit prediction after the session has started.');
					return;
				}
				
				// Get current order of entrants
				const entrantItems = entrantsList.querySelectorAll('.entrant-item');
				const orderedIds = Array.from(entrantItems).map(item => 
					parseInt(item.getAttribute('data-entrant-id'))
				);
				
				// Send to server
				savePrediction(sessionId, orderedIds);
			});
		});
		
		function isMobileDevice() {
			return (window.innerWidth <= 768) || 
				   ('ontouchstart' in window) || 
				   (navigator.maxTouchPoints > 0) || 
				   (navigator.msMaxTouchPoints > 0);
		}
		
		function renderEntrants(entrants, container) {
			container.innerHTML = '';
			
			entrants.forEach((entrant, index) => {
				const position = index + 1;
				const item = document.createElement('div');
				const isTopTen = position <= 10;
				
				// Apply different styling for drivers outside top 10
				item.className = 'entrant-item flex items-center p-3 sm:p-4 bg-white border border-gray-200 rounded-md shadow-sm';
				
				// Add top-ten class for styling differences
				if (!isTopTen) {
					item.classList.add('non-points-position');
					item.style.opacity = '0.50';
				}
				
				// Add divider before position 11
				if (position === 11) {
					const divider = document.createElement('div');
					divider.className = 'border-t border-gray-300 my-3 relative';
					divider.innerHTML = '<span class="absolute top-0 left-0 transform -translate-y-1/2 bg-white px-2 text-xs text-gray-500"></span>';
					container.appendChild(divider);
				}
				
				item.setAttribute('data-entrant-id', entrant.ID);
				item.setAttribute('data-position', position);
				
				const teamColor = entrant.TeamColor || '#000000';
				
				// Add up/down buttons for mobile
				const moveUpButton = position === 1 ? 
					'<button disabled class="move-up-btn text-gray-300 w-8 h-8 flex items-center justify-center rounded disabled:cursor-not-allowed">⬆️</button>' : 
					'<button class="move-up-btn text-blue-500 w-8 h-8 flex items-center justify-center rounded hover:bg-gray-100">⬆️</button>';
				
				const moveDownButton = position === entrants.length ? 
					'<button disabled class="move-down-btn text-gray-300 w-8 h-8 flex items-center justify-center rounded disabled:cursor-not-allowed">⬇️</button>' : 
					'<button class="move-down-btn text-blue-500 w-8 h-8 flex items-center justify-center rounded hover:bg-gray-100">⬇️</button>';
				
				item.innerHTML = `
					<div class="font-bold mr-4 w-6 text-center">${position}</div>
					<div class="flex items-center justify-center w-8 h-8 rounded-full bg-gray-100 mr-4 font-semibold">${entrant.Number}</div>
					<div class="flex-1">
						<div class="font-semibold">${entrant.DriverName}</div>
						<div style="color: ${teamColor};">${entrant.TeamShortname}</div>
					</div>
					<div class="flex items-center">
						${moveUpButton}
						${moveDownButton}
						<div class="flex items-center justify-center w-10 h-10 rounded-md text-gray-500 cursor-move touch-manipulation">
							<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16" />
							</svg>
						</div>
					</div>
				`;
				
				container.appendChild(item);
				
				// Add event listeners for up/down buttons
				const upButton = item.querySelector('.move-up-btn');
				const downButton = item.querySelector('.move-down-btn');
				
				if (upButton) {
					upButton.addEventListener('click', function() {
						moveEntrantUp(item, container);
					});
				}
				
				if (downButton) {
					downButton.addEventListener('click', function() {
						moveEntrantDown(item, container);
					});
				}
			});
		}
		
		function setupSortable(container) {
			new Sortable(container, {
				animation: 150,
				handle: '.cursor-move',
				ghostClass: 'bg-gray-100',
				chosenClass: 'bg-blue-50',
				dragClass: 'shadow-lg',
				onEnd: function() {
					// Update position numbers and styles after drag
					updatePositionsAndStyles(container);
				}
			});
		}
		
		function moveEntrantUp(item, container) {
			const prevItem = item.previousElementSibling;
			if (prevItem && !prevItem.classList.contains('border-t')) {
				container.insertBefore(item, prevItem);
				updatePositionsAndStyles(container);
			}
		}
		
		function moveEntrantDown(item, container) {
			const nextItem = item.nextElementSibling;
			if (nextItem && !nextItem.classList.contains('border-t')) {
				container.insertBefore(nextItem, item);
				updatePositionsAndStyles(container);
			}
		}
		
		function updatePositionsAndStyles(container) {
			// Get all entrant items
			const items = container.querySelectorAll('.entrant-item');
			let pointsLinePresent = false;
			
			// Check if the points line divider exists and remove it
			const existingDivider = container.querySelector('.border-t.border-gray-300.my-3.relative');
			if (existingDivider) {
				container.removeChild(existingDivider);
			}
			
			// Update positions and styles
			items.forEach((item, index) => {
				const position = index + 1;
				const positionElement = item.querySelector('div:first-child');
				
				// Update position number
				positionElement.textContent = position;
				item.setAttribute('data-position', position);
				
				// Update top-ten styling
				if (position <= 10) {
					item.classList.remove('non-points-position');
					item.style.opacity = '1';
				} else {
					item.classList.add('non-points-position');
					item.style.opacity = '0.75';
					
					// Add points divider before position 11
					if (position === 11 && !pointsLinePresent) {
						const divider = document.createElement('div');
						divider.className = 'border-t border-gray-300 my-3 relative';
						divider.innerHTML = '<span class="absolute top-0 left-0 transform -translate-y-1/2 bg-white px-2 text-xs text-gray-500">Points line</span>';
						container.insertBefore(divider, item);
						pointsLinePresent = true;
					}
				}
				
				// Update up/down buttons states
				const upButton = item.querySelector('.move-up-btn');
				const downButton = item.querySelector('.move-down-btn');
				
				if (position === 1) {
					upButton.disabled = true;
					upButton.classList.add('text-gray-300');
					upButton.classList.remove('text-blue-500', 'hover:bg-gray-100');
				} else {
					upButton.disabled = false;
					upButton.classList.remove('text-gray-300');
					upButton.classList.add('text-blue-500', 'hover:bg-gray-100');
				}
				
				if (position === items.length) {
					downButton.disabled = true;
					downButton.classList.add('text-gray-300');
					downButton.classList.remove('text-blue-500', 'hover:bg-gray-100');
				} else {
					downButton.disabled = false;
					downButton.classList.remove('text-gray-300');
					downButton.classList.add('text-blue-500', 'hover:bg-gray-100');
				}
			});
		}
		
		function getTimeUntil(deadline) {
			const now = new Date();
			const diff = deadline - now;
			
			if (diff <= 0) {
				return 'Deadline passed';
			}
			
			const days = Math.floor(diff / (1000 * 60 * 60 * 24));
			const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
			const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
			
			let result = '';
			if (days > 0) {
				result += `${days}d `;
			}
			if (hours > 0 || days > 0) {
				result += `${hours}h `;
			}
			result += `${minutes}m`;
			
			return result;
		}
		
		function savePrediction(sessionId, orderedIds) {
			// Create fetch request to save the prediction
			fetch('/formulaone/prediction/save', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					session_id: sessionId,
					entrant_order: orderedIds
				})
			})
			.then(response => {
				if (!response.ok) {
					throw new Error('Network response was not ok');
				}
				return response.json();
			})
			.then(data => {
				if (data.success) {
					alert('Prediction saved successfully!');
				} else {
					alert('Error: ' + (data.message || 'Failed to save prediction.'));
				}
			})
			.catch(error => {
				console.error('Error saving prediction:', error);
				alert('Failed to save prediction. Please try again.');
			});
		}
	</script>
}

// SessionPredictionData holds all the data needed for the prediction component
type SessionPredictionData struct {
	Session  datastore.FormulaOneSession                   `json:"session"`
	Entrants []datastore.GetFormulaOneEntrantsBySessionRow `json:"entrants"`
}

// Helper function to generate the JSON data attribute
func generateSessionDataJSON(sessionData FormulaOneSessionWithEntrants, userPrediction []int64) string {
	// Create a copy of entrants that we can sort
	sortedEntrants := make([]datastore.GetFormulaOneEntrantsBySessionRow, len(sessionData.Entrants))
	copy(sortedEntrants, sessionData.Entrants)

	// If user has a previous prediction, use that order
	if len(userPrediction) > 0 {
		// Create a map for entrant lookup by ID
		entrantMap := make(map[int64]datastore.GetFormulaOneEntrantsBySessionRow)
		for _, entrant := range sessionData.Entrants {
			entrantMap[entrant.ID] = entrant
		}

		// Create a set of predicted entrant IDs to identify unpredicted entrants later
		predictedEntrantIDs := make(map[int64]bool)

		// First, add entrants according to user's prediction order
		sortedEntrants = nil // Clear the sorted entrants slice
		for _, entrantID := range userPrediction {
			if entrant, exists := entrantMap[entrantID]; exists {
				sortedEntrants = append(sortedEntrants, entrant)
				predictedEntrantIDs[entrantID] = true
			}
		}

		// Then add any entrants that weren't in the user's prediction
		for _, entrant := range sessionData.Entrants {
			if !predictedEntrantIDs[entrant.ID] {
				sortedEntrants = append(sortedEntrants, entrant)
			}
		}
	}

	data := SessionPredictionData{
		Session:  sessionData.Session,
		Entrants: sortedEntrants,
	}

	jsonData, err := json.Marshal(data)
	if err != nil {
		return "{}"
	}

	return string(jsonData)
}

// FormulaOneSeasonPage displays the Formula One season page with constructor standings prediction
templ FormulaOneSeasonPage(cookieInfo CookieInfo, season string, teams []datastore.GetTeamsByFormulaOneSeasonRow, userPrediction []datastore.GetFormulaOneSeasonPredictionRow, events []datastore.FormulaOneEventsView) {
	@Page(
		"Formula 1 "+season+" Season Predictions",
		"Predict the constructor standings for the Formula 1 "+season+" season",
		templ.URL("/f1/"+season),
		cookieInfo,
	) {
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
			<div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
				<!-- Season Events Sidebar -->
				<div class="col-span-1">
					<div class="bg-white shadow-md rounded-lg p-6 mb-6">
						<h2 class="text-xl font-bold text-gray-900 mb-4">F1 { season } Events</h2>
						if len(events) > 0 {
							<ul class="space-y-2">
								for _, event := range events {
									<li>
										<a href={ templ.URL("/formulaone/event/" + strconv.FormatInt(event.ID, 10)) } class="flex items-center p-2 hover:bg-gray-50 rounded-md transition">
											<span class="text-gray-700 font-medium">Round { strconv.FormatInt(event.Round, 10) }</span>
											<span class="ml-3 text-gray-900">{ event.Name.String }</span>
										</a>
									</li>
								}
							</ul>
						} else {
							<p class="text-gray-500 italic">No events available for this season yet.</p>
						}
					</div>
				</div>
				<!-- Main Content -->
				<div class="col-span-1 lg:col-span-2">
					<div class="bg-white shadow-md rounded-lg p-6 mb-6">
						<h1 class="text-3xl font-bold text-gray-900 mb-4">Formula 1 { season } Constructor Standings Prediction</h1>
						<p class="text-gray-600 mb-6">Drag and drop the teams to predict the final constructor standings for the { season } season.</p>
						<!-- Season Prediction Component -->
						<div id="season-prediction-component" class="w-full" data-teams={ generateTeamsJSON(teams, userPrediction, season) }>
							<div id="mobile-instructions" class="hidden mb-4 p-3 bg-blue-50 text-blue-800 rounded-md border border-blue-200">
								<p class="text-sm">Touch and hold a team, then drag to reorder your prediction. You can also use the up/down buttons to adjust positions.</p>
							</div>
							<div id="teams-list" class="space-y-2 mb-6"></div>
							if cookieInfo.IsAuthenticated {
								<div class="mt-6 text-right">
									<button id="save-prediction" class="bg-green-500 hover:bg-green-600 text-white font-semibold py-3 px-6 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-opacity-50 transition text-base">
										Save Prediction
									</button>
								</div>
							} else {
								<div class="mt-6 p-4 bg-yellow-50 text-yellow-800 rounded-md border border-yellow-200">
									<p>You need to <a href="/login" class="font-medium underline">login</a> to save your prediction.</p>
								</div>
							}
						</div>
						<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
						<script>
							// This function will be called when the DOM is loaded
							document.addEventListener('DOMContentLoaded', function() {
								// Check if we're on a mobile device and show instructions
								if (isMobileDevice()) {
									document.getElementById('mobile-instructions').classList.remove('hidden');
								}
								
								// Get teams data from the data attribute (populated by Go template)
								const seasonComponent = document.getElementById('season-prediction-component');
								const teamsData = JSON.parse(seasonComponent.getAttribute('data-teams'));
								const teams = teamsData.teams;
								const season = teamsData.season;
								
								// Teams are already sorted on the backend
								// Render teams as draggable items
								const teamsList = document.getElementById('teams-list');
								renderTeams(teams, teamsList);
								
								// Set up sortable.js for drag and drop (touch-friendly)
								setupSortable(teamsList);
								
								// Handle save button
								const saveButton = document.getElementById('save-prediction');
								if (saveButton) {
									saveButton.addEventListener('click', function() {
										// Get current order of teams
										const teamItems = teamsList.querySelectorAll('.team-item');
										const orderedIds = Array.from(teamItems).map(item => 
											parseInt(item.getAttribute('data-team-id'))
										);
										
										// Send to server
										saveSeasonPrediction(season, orderedIds);
									});
								}
							});
							
							function isMobileDevice() {
								return (window.innerWidth <= 768) || 
									'ontouchstart' in window || 
									navigator.maxTouchPoints > 0 || 
									navigator.msMaxTouchPoints > 0;
							}
							
							function renderTeams(teams, container) {
								container.innerHTML = '';
								
								teams.forEach((team, index) => {
									const position = index + 1;
									const item = document.createElement('div');
									
									item.className = 'team-item flex items-center p-4 bg-white border border-gray-200 rounded-md shadow-sm';
									item.setAttribute('data-team-id', team.ID);
									item.setAttribute('data-position', position);
									
									const teamColor = team.Color || '#CCCCCC';
									const teamSecondaryColor = team.SecondaryColor || '#000000';
									
									// Add up/down buttons for mobile
									const moveUpButton = position === 1 ? 
										'<button disabled class="move-up-btn text-gray-300 w-8 h-8 flex items-center justify-center rounded disabled:cursor-not-allowed">⬆️</button>' : 
										'<button class="move-up-btn text-blue-500 w-8 h-8 flex items-center justify-center rounded hover:bg-gray-100">⬆️</button>';
									
									const moveDownButton = position === teams.length ? 
										'<button disabled class="move-down-btn text-gray-300 w-8 h-8 flex items-center justify-center rounded disabled:cursor-not-allowed">⬇️</button>' : 
										'<button class="move-down-btn text-blue-500 w-8 h-8 flex items-center justify-center rounded hover:bg-gray-100">⬇️</button>';
									
									item.innerHTML = `
										<div class="font-bold mr-4 w-6 text-center">${position}</div>
										<div class="flex items-center justify-center w-10 h-10 rounded-full mr-4" style="background: ${teamColor}; border: 2px solid ${teamSecondaryColor}"></div>
										<div class="flex-1">
											<div class="font-semibold">${team.Fullname}</div>
											<div style="color: ${teamColor};">${team.Shortname}</div>
										</div>
										<div class="flex items-center">
											${moveUpButton}
											${moveDownButton}
											<div class="flex items-center justify-center w-10 h-10 rounded-md text-gray-500 cursor-move touch-manipulation">
												<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
													<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8h16M4 16h16" />
												</svg>
											</div>
										</div>
									`;
									
									container.appendChild(item);
									
									// Add event listeners for up/down buttons
									const upButton = item.querySelector('.move-up-btn');
									const downButton = item.querySelector('.move-down-btn');
									
									if (upButton) {
										upButton.addEventListener('click', function() {
											moveTeamUp(item, container);
										});
									}
									
									if (downButton) {
										downButton.addEventListener('click', function() {
											moveTeamDown(item, container);
										});
									}
								});
							}
							
							function setupSortable(container) {
								new Sortable(container, {
									animation: 150,
									handle: '.cursor-move',
									ghostClass: 'bg-gray-100',
									chosenClass: 'bg-blue-50',
									dragClass: 'shadow-lg',
									onEnd: function() {
										// Update position numbers and styles after drag
										updatePositions(container);
									}
								});
							}
							
							function moveTeamUp(item, container) {
								const prevItem = item.previousElementSibling;
								if (prevItem) {
									container.insertBefore(item, prevItem);
									updatePositions(container);
								}
							}
							
							function moveTeamDown(item, container) {
								const nextItem = item.nextElementSibling;
								if (nextItem) {
									container.insertBefore(nextItem, item);
									updatePositions(container);
								}
							}
							
							function updatePositions(container) {
								// Get all team items
								const items = container.querySelectorAll('.team-item');
								
								// Update positions and buttons
								items.forEach((item, index) => {
									const position = index + 1;
									const positionElement = item.querySelector('div:first-child');
									
									// Update position number
									positionElement.textContent = position;
									item.setAttribute('data-position', position);
									
									// Update up/down buttons states
									const upButton = item.querySelector('.move-up-btn');
									const downButton = item.querySelector('.move-down-btn');
									
									if (position === 1) {
										upButton.disabled = true;
										upButton.classList.add('text-gray-300');
										upButton.classList.remove('text-blue-500', 'hover:bg-gray-100');
									} else {
										upButton.disabled = false;
										upButton.classList.remove('text-gray-300');
										upButton.classList.add('text-blue-500', 'hover:bg-gray-100');
									}
									
									if (position === items.length) {
										downButton.disabled = true;
										downButton.classList.add('text-gray-300');
										downButton.classList.remove('text-blue-500', 'hover:bg-gray-100');
									} else {
										downButton.disabled = false;
										downButton.classList.remove('text-gray-300');
										downButton.classList.add('text-blue-500', 'hover:bg-gray-100');
									}
								});
							}
							
							function saveSeasonPrediction(season, orderedIds) {
								// Create fetch request to save the prediction
								fetch('/formulaone/season-prediction/save', {
									method: 'POST',
									headers: {
										'Content-Type': 'application/json',
									},
									body: JSON.stringify({
										season: season,
										team_order: orderedIds
									})
								})
								.then(response => {
									if (!response.ok) {
										throw new Error('Network response was not ok');
									}
									return response.json();
								})
								.then(data => {
									if (data.success) {
										alert('Season prediction saved successfully!');
									} else {
										alert('Error: ' + (data.message || 'Failed to save prediction.'));
									}
								})
								.catch(error => {
									console.error('Error saving prediction:', error);
									alert('Failed to save prediction. Please try again.');
								});
							}
						</script>
					</div>
				</div>
			</div>
		</div>
	}
}

// SeasonTeamsData holds all the data needed for the season prediction component
type SeasonTeamsData struct {
	Teams  []datastore.GetTeamsByFormulaOneSeasonRow `json:"teams"`
	Season string                                    `json:"season"`
}

// Helper function to generate the JSON data attribute for teams
func generateTeamsJSON(teams []datastore.GetTeamsByFormulaOneSeasonRow, userPrediction []datastore.GetFormulaOneSeasonPredictionRow, season string) string {
	// Create a copy of teams that we can sort
	sortedTeams := make([]datastore.GetTeamsByFormulaOneSeasonRow, len(teams))
	copy(sortedTeams, teams)

	// If user has a previous prediction, use that order
	if len(userPrediction) > 0 {
		// Create a map for team lookup by ID
		teamMap := make(map[int64]datastore.GetTeamsByFormulaOneSeasonRow)
		for _, team := range teams {
			teamMap[team.ID] = team
		}

		// Create a map to sort the predictions by position
		positionTeamMap := make(map[int64]int64) // position -> team_id
		for _, pred := range userPrediction {
			positionTeamMap[pred.Position] = pred.Team
		}

		// Create a set of predicted team IDs to identify unpredicted teams later
		predictedTeamIDs := make(map[int64]bool)

		// First, add teams according to user's prediction order
		sortedTeams = nil // Clear the sorted teams slice
		for i := int64(1); i <= int64(len(userPrediction)); i++ {
			if teamID, ok := positionTeamMap[i]; ok {
				if team, exists := teamMap[teamID]; exists {
					sortedTeams = append(sortedTeams, team)
					predictedTeamIDs[teamID] = true
				}
			}
		}

		// Then add any teams that weren't in the user's prediction
		for _, team := range teams {
			if !predictedTeamIDs[team.ID] {
				sortedTeams = append(sortedTeams, team)
			}
		}
	}

	data := SeasonTeamsData{
		Teams:  sortedTeams,
		Season: season,
	}

	jsonData, err := json.Marshal(data)
	if err != nil {
		return "{}"
	}

	return string(jsonData)
}
