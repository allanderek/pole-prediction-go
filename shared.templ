package main

import (
	"database/sql"
	"strings"
	"time"

	"github.com/allanderek/pole-prediction-go/datastore"
)

templ NullableString(ifNull string, nullable sql.NullString) {
	if nullable.Valid {
		{ nullable.String }
	} else {
		{ ifNull }
	}
}

templ ShowEventName(event datastore.FormulaOneEventsView) {
	@NullableString("Unknown event name", event.Name)
	if event.Issprint > 0 {
		üèÉ
	}
}

templ Page(title, description string, uri templ.SafeURL, cookieInfo CookieInfo) {
	<!DOCTYPE html>
	<html lang="en" class="h-full bg-white">
		<head>
			<title>{ title }</title>
			<meta name="description" content={ description }/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<script type="module" src="https://cdn.jsdelivr.net/gh/starfederation/datastar@v1.0.0-beta.3/bundles/datastar.js"></script>
			<script src="https://unpkg.com/@phosphor-icons/web@2.1.1"></script>
			<link rel="icon" type="image/svg" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' width='48' height='48' viewBox='0 0 16 16'><text x='0' y='14'>üèéÔ∏è</text></svg>"/>
			<link rel="preconnect" href="https://fonts.googleapis.com"/>
			<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin/>
			<link href="https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&display=swap" rel="stylesheet"/>
			<link href="https://fonts.googleapis.com/css2?family=Merriweather+Sans:ital,wght@0,300..800;1,300..800&family=Merriweather:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&display=swap" rel="stylesheet"/>
			<link href="/static/styles.css" rel="stylesheet"/>
			<style>
                            @view-transition {
                                navigation: auto;
                            }
                              /* Disable sidebar transitions */
                            ::view-transition-old(sidebar),
                            ::view-transition-new(sidebar) {
                                animation: none !important;
                                mix-blend-mode: normal !important;
                            }
                        </style>
			<style type="text/tailwindcss">
			  @theme {
			  	--font-serif: Merriweather, sans-serif;
				--font-sans: Merriweather Sans, sans-serif;
			  }
			</style>
		</head>
		<body class="h-full">
			@Header(cookieInfo, uri)
			{ children... }
		</body>
	</html>
}

func checkForCurrentUri(href, currentURI templ.SafeURL, classes string) string {
	if strings.HasPrefix(string(currentURI), string(href)) {
		return classes + " bg-gray-50 text-indigo-600"
	} else {
		return classes + " text-gray-900 hover:bg-gray-50"
	}
}

// Desktop navigation link with active state highlighting
templ DesktopNavLink(href, currentURI templ.SafeURL) {
	<a href={ href } class={ checkForCurrentUri(href, currentURI, "text-sm/6 font-semibold") }>
		{ children... }
	</a>
}

// Mobile navigation link with active state highlighting
templ MobileNavLink(href, currentURI templ.SafeURL) {
	<a href={ href } class={ checkForCurrentUri(href, currentURI, "-mx-3 block rounded-lg px-3 py-2 text-base/7 font-semibold") }>
		{ children... }
	</a>
}

// Main Header component with current URI awareness
templ Header(cookieInfo CookieInfo, currentURI templ.SafeURL) {
	<header class="bg-white">
		<nav class="mx-auto flex max-w-7xl items-center justify-between p-6 lg:px-8" aria-label="Global">
			<div class="flex flex-1">
				<div class="hidden lg:flex lg:gap-x-12">
					@DesktopNavLink("/f1/2025", currentURI) {
						Formula 1 
					}
					@DesktopNavLink("/fe/2024-25", currentURI) {
						Formula E 
					}
					@DesktopNavLink("/leaderboard", currentURI) {
						Leaderboard 
					}
				</div>
				<div class="flex lg:hidden">
					<button type="button" class="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700" id="mobile-menu-button">
						<span class="sr-only">Open main menu</span>
						<svg class="size-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" data-slot="icon">
							<path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
						</svg>
					</button>
				</div>
			</div>
			<a href="/" class="-m-1.5 p-1.5">
				<span class="sr-only">Pole Prediction</span>
				<img class="h-12 w-auto" src="/static/logo/pole-prediction-logo.svg" alt="Pole Prediction logo"/>
			</a>
			<div class="flex flex-1 justify-end">
				if cookieInfo.IsAuthenticated {
					@DesktopNavLink("/profile", currentURI) {
						{ cookieInfo.FullName }
						if cookieInfo.IsAdmin {
							<span class="admin-icon" aria-label="Administrator">‚öôÔ∏è</span>
						}
						<span aria-hidden="true">&rarr;</span>
					}
				} else {
					@DesktopNavLink("/login", currentURI) {
						Login <span aria-hidden="true">&rarr;</span>
					}
				}
			</div>
		</nav>
		<!-- Mobile menu, initially hidden -->
		<div class="lg:hidden hidden" role="dialog" aria-modal="true" id="mobile-menu">
			<!-- Background backdrop, hidden by default -->
			<div class="fixed inset-0 z-10 bg-gray-500 bg-opacity-75 transition-opacity hidden" id="mobile-menu-backdrop"></div>
			<div class="fixed inset-y-0 left-0 z-10 w-full overflow-y-auto bg-white px-6 py-6 transform transition-transform -translate-x-full" id="mobile-menu-panel">
				<div class="flex items-center justify-between">
					<div class="flex flex-1">
						<button type="button" class="-m-2.5 rounded-md p-2.5 text-gray-700" id="mobile-menu-close">
							<span class="sr-only">Close menu</span>
							<svg class="size-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true" data-slot="icon">
								<path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12"></path>
							</svg>
						</button>
					</div>
					<a href="/" class="-m-1.5 p-1.5 mobile-menu-link">
						<span class="sr-only">Pole Prediction</span>
						<img class="h-8 w-auto" src="/static/logo/pole-prediction-icon.svg" alt="Pole Prediction"/>
					</a>
					<div class="flex flex-1 justify-end">
						if cookieInfo.IsAuthenticated {
							@MobileNavLink("/profile", currentURI) {
								{ cookieInfo.FullName } <span aria-hidden="true">&rarr;</span>
							}
						} else {
							@MobileNavLink("/login", currentURI) {
								Login <span aria-hidden="true">&rarr;</span>
							}
						}
					</div>
				</div>
				<div class="mt-6 space-y-2 mobile-menu-links">
					@MobileNavLink("/f1/2025", currentURI) {
						Formula 1 
					}
					@MobileNavLink("/fe/2025", currentURI) {
						Formula E 
					}
					@MobileNavLink("/leaderboard", currentURI) {
						Leaderboard 
					}
				</div>
			</div>
		</div>
		<script>
			// Initialize mobile menu functionality when the DOM is loaded
			document.addEventListener('DOMContentLoaded', function() {
				const mobileMenuButton = document.getElementById('mobile-menu-button');
				const mobileMenu = document.getElementById('mobile-menu');
				const mobileMenuBackdrop = document.getElementById('mobile-menu-backdrop');
				const mobileMenuPanel = document.getElementById('mobile-menu-panel');
				const mobileMenuClose = document.getElementById('mobile-menu-close');
				const mobileMenuLinks = document.querySelectorAll('.mobile-menu-links a, .mobile-menu-link');
				
				// Function to open the mobile menu
				function openMobileMenu() {
					mobileMenu.classList.remove('hidden');
					setTimeout(() => {
						mobileMenuBackdrop.classList.remove('hidden');
						mobileMenuPanel.classList.remove('-translate-x-full');
					}, 10);
					document.body.style.overflow = 'hidden'; // Prevent scrolling
				}
				
				// Function to close the mobile menu
				function closeMobileMenu() {
					mobileMenuBackdrop.classList.add('hidden');
					mobileMenuPanel.classList.add('-translate-x-full');
					setTimeout(() => {
						mobileMenu.classList.add('hidden');
					}, 300); // Match the transition duration
					document.body.style.overflow = ''; // Restore scrolling
				}
				
				// Open menu when the button is clicked
				mobileMenuButton.addEventListener('click', openMobileMenu);
				
				// Close menu when the close button is clicked
				mobileMenuClose.addEventListener('click', closeMobileMenu);
				
				// Close menu when the backdrop is clicked
				mobileMenuBackdrop.addEventListener('click', closeMobileMenu);
				
				// Close menu when any menu link is clicked
				mobileMenuLinks.forEach(link => {
					link.addEventListener('click', closeMobileMenu);
				});
				
				// Close menu when escape key is pressed
				document.addEventListener('keydown', function(event) {
					if (event.key === 'Escape' && !mobileMenu.classList.contains('hidden')) {
						closeMobileMenu();
					}
				});
			});
		</script>
	</header>
}

// FormatTimeInLondon formats a timestamp as a human-readable date and time in Europe/London timezone
func FormatTimeInLondon(timestamp string) (string, error) {
	if timestamp == "" {
		return "TBD", nil
	}

	// Parse the timestamp
	t, err := time.Parse(time.RFC3339, timestamp)
	if err != nil {
		// Try parsing without timezone - assuming UTC
		t, err = time.Parse("2006-01-02 15:04:05", timestamp)
		if err != nil {
			return "", err
		}
	}

	// Load London location
	loc, err := time.LoadLocation("Europe/London")
	if err != nil {
		return "", err
	}

	// Convert to London time
	londonTime := t.In(loc)

	// Format as human readable
	return londonTime.Format("Mon, 02 Jan, 15:04 MST"), nil
}

// FormatLondonTime is a templ helper function to format timestamps in London timezone
templ FormatLondonTime(timestamp string) {
	if formatted, err := FormatTimeInLondon(timestamp); err == nil {
		{ formatted }
	} else {
		{ timestamp }
	}
}
